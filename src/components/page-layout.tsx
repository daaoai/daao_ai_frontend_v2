import { ReactNode } from "react";
import { HeadComponent } from "./head-component";
import React from "react";
import { Navbar } from "./navigation/navbar";
import { Footer } from "./footer";
import { AppNavbar } from "./navigation/app-navbar";
import { Toaster } from "./ui/toaster";
import Image from "next/image";

interface LayoutProps {
  flexDirection?: "row" | "col";
  justify?: "start" | "end" | "center" | "between" | "around" | "evenly";
  align?: "start" | "end" | "center" | "baseline" | "stretch";
  gap?: number;
  app?: boolean;
}

interface PageLayoutProps extends LayoutProps {
  children: ReactNode;
  title?: string;
  description?: string;
}

export const PageLayout: React.FC<PageLayoutProps> = ({
  children,
  title = "RainbowKit App",
  description = "Generated by @rainbow-me/rainbowkit",
  flexDirection = "col",
  justify = "start",
  align = "center",
  gap = 8,
  app = false
}) => {
  return (
    <>
      <HeadComponent title={title} description={description} />
      <MainContainer
        flexDirection={flexDirection}
        justify={justify}
        align={align}
        gap={gap}
        app={app}
      >
        {children}
      </MainContainer>
    </>
  );
};

const MainContainer: React.FC<LayoutProps & { children: React.ReactNode }> = ({
  children,
  flexDirection = "col",
  justify = "start",
  align = "center",
  gap = 2,
  app = false,
}) => {
  const justifyClass = {
    start: "justify-start",
    end: "justify-end",
    center: "justify-center",
    between: "justify-between",
    around: "justify-around",
    evenly: "justify-evenly",
  }[justify];

  const alignClass = {
    start: "items-start",
    end: "items-end",
    center: "items-center",
    baseline: "items-baseline",
    stretch: "items-stretch",
  }[align];

  return (
    <>
      {app ? <AppNavbar /> : <Navbar />}
      {/* <AppNavbar /> */}
      <main
        className={`sm:overflow-hidden relative min-h-screen flex flex-wrap flex-${flexDirection} ${justifyClass} ${alignClass} gap-${gap} pt-16`}
      >
        {/* {app ? (
          <div className="absolute inset-0 bg-black h-full overflow-hidden">
            <div className="absolute top-0 right-0 w-full h-full">
              <div className="relative w-[100%] h-[100%] -right-1/4 lg:-right-[1/2] -top-1/8 lg:-top-1/4 lg:mt-[100px]">
                <Image
                  src="/assets/star-1-with-purple-star.svg"
                  alt="@star"
                  width={2000}
                  height={2000}
                />
              </div>
            </div>
          </div>
        ) : (
          <div className="absolute inset-0 h-full">
          </div>

        )} */}

        {/*rest of the stuff*/}
        <div className="h-min relative z-10 flex flex-col flex-wrap items-center justify-center text-center pb-8">
          {children}
        </div>
      </main >
      <Toaster />
      <Footer app={app} />
    </>
  );
};
